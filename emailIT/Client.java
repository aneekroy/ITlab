package mailclient;


import java.util.ArrayList;
import java.net.*;
import java.io.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author souvik
 */
public class Client extends javax.swing.JFrame {

    
    String id, ip;
    int port;
    ArrayList<String> summary=new ArrayList<>();
    ArrayList<Message> messages=new ArrayList<>();
    public Client(String id, String ip, int port) {
        
        this.id=id;
        this.ip=ip;
        this.port=port;
        initComponents();
        start_message();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mails_list = new javax.swing.JList<>();
        field_refresh = new javax.swing.JButton();
        filed_compose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mails");

        jScrollPane1.setViewportView(mails_list);

        field_refresh.setText("Refresh");
        field_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field_refreshActionPerformed(evt);
            }
        });

        filed_compose.setText("Compose");
        filed_compose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filed_composeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(field_refresh)
                        .addGap(41, 41, 41)
                        .addComponent(filed_compose)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_refresh)
                    .addComponent(filed_compose))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void field_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field_refreshActionPerformed
        
        get_new_msg();
    }//GEN-LAST:event_field_refreshActionPerformed

    private void filed_composeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filed_composeActionPerformed
        // TODO add your handling code here:
        
        Compose compose=new Compose(ip, id);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                compose.setVisible(true);
            }
        });
    }//GEN-LAST:event_filed_composeActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton field_refresh;
    private javax.swing.JButton filed_compose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> mails_list;
    // End of variables declaration//GEN-END:variables
    private userListModel msg_list;


    public void start_message(){
        
        msg_list=new userListModel();
        mails_list.setModel(msg_list);
        mails_list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {//This line should prevent double events
                
                    int index=mails_list.getSelectedIndex();
                    mails_list.clearSelection();
                    if(index!=-1){
                        javax.swing.JOptionPane.showMessageDialog(null, messages.get(index).getMessage(), "Mail", javax.swing.JOptionPane.PLAIN_MESSAGE);
                    } 
                }
            }
        });
        login();
    }
    public void login(){
        
        try{
            Socket socket=new Socket(ip, port);
            DataInputStream inp = new DataInputStream(socket.getInputStream());
            DataOutputStream oup=new DataOutputStream(socket.getOutputStream());
            oup.writeUTF("0"+id);
            inp.close();
            oup.close();
            socket.close();
        }
        catch(Exception e){
            
            System.out.print("in login: "+e);
        }
    }
   
    public void get_new_msg(){
        
        GetMessages gmsg=new GetMessages(id, ip, this);
        gmsg.recv_messages();
    }
    
    public void save_msg(Message msg){
          
        summary.add(msg.getSender());
        messages.add(msg);
        msg_list.updateList(summary);
    }

}
/*class for model*/
class userListModel extends javax.swing.AbstractListModel<String>{
        
    java.util.ArrayList<String> list=new java.util.ArrayList<>();  
        
    @Override
    public int getSize() {
    return list.size();
    }

    @Override
    public String getElementAt(int i) {
       return list.get(i);
    }
    
    public void updateList(java.util.ArrayList<String> new_list){
        
        list=new_list;
        fireContentsChanged(this, 0, list.size());
    }
    public boolean contains(String name){
        
        return list.contains(name);
    }
}

